AWSTemplateFormatVersion: 2010-09-09
Parameters: 
  StackEnvType: 
    Type: String
    Default: dev
    Description: A classifier on the stack-name used to tag instances.
  GitRepoUrl: 
    Type: String
    Description: Github repository url.
Resources:
  CodeBuildSPA:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: !Ref AWS::StackName
      ServiceRole: 'builder'
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: 'aws/codebuild/docker:1.12.1'
        Type: LINUX_CONTAINER
      Artifacts:
        Type: S3
        Location: 'allen-parslow-codebuild'
        Name: !Ref 'AWS::StackName'
        NamespaceType: BUILD_ID
        Packaging: ZIP
      Source:
        Type: GITHUB
        Location: !Ref 'GitRepoUrl'
  CodeDeploySPA:
    Type: 'AWS::CodeDeploy::Application'
    Properties:
      ApplicationName: !Ref AWS::StackName
  DeploymentGroupSPA:
    Type: 'AWS::CodeDeploy::DeploymentGroup'
    Properties:
      DeploymentGroupName: !Sub '${AWS::StackName}-${StackEnvType}'
      ApplicationName: !Ref AWS::StackName
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      ServiceRoleArn: !Sub  'arn:aws:iam::${AWS::AccountId}:role/deploy'
      Ec2TagFilters:
        - Type: KEY_AND_VALUE
          Key: Name
          Value: !Sub '${AWS::StackName}-${StackEnvType}'
    DependsOn:
      - CodeDeploySPA
  USEast1AmazonLinuxEC2SPA:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-8c1be5f6
      InstanceType: t2.micro
      KeyName: !Ref AWS::Region
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: 8
            DeleteOnTermination: true
      SecurityGroups:
        - my-ip
      IamInstanceProfile: deploy-target
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-${StackEnvType}'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -x
          # TODO use region variable 
          echo 'start deploytarget_recipe in ${AWS::Region} ---------------------------'
          yum update -y
          yum install -y ruby
          yum install -y docker
          service docker start
          pip install awscli --upgrade --user
          pip --version
          aws --version
          mkdir -p /tmp/aws-ec2-setup/ || true
          cd /tmp/aws-ec2-setup/		  
          wget https://aws-codedeploy-${AWS::Region}.s3.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto
          service codedeploy-agent status || true
          service codedeploy-agent start || true
          mkdir -p /var/awslogs/etc/config
          cd /tmp/aws-ec2-setup/
          wget https://s3.amazonaws.com/aws-codedeploy-${AWS::Region}/cloudwatch/codedeploy_logs.conf
          mkdir -p /var/awslogs/etc/config/
          cp codedeploy_logs.conf /var/awslogs/etc/config/
          cd /tmp/aws-ec2-setup/
          wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py
          chmod +x ./awslogs-agent-setup.py
          python awslogs-agent-setup.py -n -r ${AWS::Region} -c s3://aws-codedeploy-${AWS::Region}/cloudwatch/awslogs.conf
          service awslogs restart
          cd /tmp/aws-ec2-setup/
          yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm	
          start amazon-ssm-agent
          ls -lh /tmp/aws-ec2-setup/
          echo 'end deploytarget_recipe---------------------------'